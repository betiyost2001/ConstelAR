diff --git a/frontend/src/components/Header.jsx b/frontend/src/components/Header.jsx
index 78acf947b41101f00ffddaa5a31f3a46ecb5c11f..fc4d341d1719d1c923bf4fa923bd4ce247645d87 100644
--- a/frontend/src/components/Header.jsx
+++ b/frontend/src/components/Header.jsx
@@ -2,56 +2,54 @@ import {
   Box, Flex, HStack, IconButton, Link, Stack, useDisclosure, Text, Button,
   Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalCloseButton
 } from "@chakra-ui/react";
 import { CloseIcon, HamburgerIcon } from "@chakra-ui/icons";
 
 const NAV = [
   { href: "#map", label: "Mapa" },
   { href: "#metodo", label: "Metodología" },
   { href: "#docs", label: "Docs" },
 ];
 
 function ContaminantsInfoModalBtn() {
   const { isOpen, onOpen, onClose } = useDisclosure();
   return (
     <>
       <Button size="sm" variant="outline" onClick={onOpen}>
         ¿Qué mide cada contaminante?
       </Button>
       <Modal isOpen={isOpen} onClose={onClose} size="lg" isCentered>
         <ModalOverlay />
         <ModalContent>
           <ModalHeader>Contaminantes y por qué importan</ModalHeader>
           <ModalCloseButton />
           <ModalBody>
             <Stack spacing={3} fontSize="sm">
-              <Text><b>PM2.5</b>: partículas finas que penetran profundamente en los pulmones.</Text>
-              <Text><b>PM10</b>: partículas respirables (polvo, polen).</Text>
-              <Text><b>NO₂</b>: tráfico/combustión; irritación respiratoria.</Text>
-              <Text><b>O₃</b>: ozono troposférico; se forma con sol y precursores.</Text>
-              <Text><b>SO₂</b>: combustibles con azufre; afecta vías respiratorias.</Text>
-              <Text><b>CO</b>: monóxido de carbono; reduce transporte de oxígeno en sangre.</Text>
+              <Text><b>NO₂</b>: indicador de emisiones del transporte y centrales eléctricas; agrava enfermedades respiratorias.</Text>
+              <Text><b>SO₂</b>: proviene de combustibles con azufre y procesos industriales; causa irritación y lluvia ácida.</Text>
+              <Text><b>O₃</b>: ozono troposférico formado por reacciones fotoquímicas; afecta pulmones y cultivos.</Text>
+              <Text><b>HCHO</b>: formaldehído generado por incendios y procesos industriales; precursor de ozono.</Text>
               <Link href="#metodo" color="space.neonYel">Leer metodología</Link>
             </Stack>
           </ModalBody>
         </ModalContent>
       </Modal>
     </>
   );
 }
 
 export default function Header() {
   const { isOpen, onOpen, onClose } = useDisclosure();
   return (
     <Box as="header" position="sticky" top="0" zIndex="docked" bg="transparent" backdropFilter="blur(6px)">
       <Flex className="spaceapps-bg"
         px={{ base: 4, md: 8 }} py={3} align="center"
         borderBottom="1px solid" borderColor="rgba(255,255,255,.08)">
         {/* Brand */}
         <Text as="a" href="/" fontFamily="'Fira Sans', system-ui, sans-serif" fontWeight="900" fontSize="xl">
           ConstelAR
         </Text>
 
         <HStack spacing={6} ml={8} display={{ base: "none", md: "flex" }}>
           {NAV.map((item) => (
             <Link key={item.href} href={item.href} className="glow-hover" _hover={{ color: "space.neonYel" }}>
               {item.label}
diff --git a/frontend/src/components/Legend.jsx b/frontend/src/components/Legend.jsx
index 25f52e47119c6538955b2c92aabc996055892620..3b5dda01129cdf5dcde7d8b35ed05d7af12e586d 100644
--- a/frontend/src/components/Legend.jsx
+++ b/frontend/src/components/Legend.jsx
@@ -1,37 +1,40 @@
 import { Box, Flex, Text, Stack } from "@chakra-ui/react";
 import { legendFor } from "../constants/aqi";
+import { DEFAULT_POLLUTANT, getPollutantLabel, getPollutantUnit } from "../constants/pollutants";
 
-export default function Legend({ pollutant = "pm25", position = "bottom-right" }) {
+export default function Legend({ pollutant = DEFAULT_POLLUTANT, position = "bottom-right" }) {
   const items = legendFor(pollutant);
   const pos = {
     "bottom-right": { bottom: 4, right: 4 },
     "bottom-left": { bottom: 4, left: 4 },
     "top-right": { top: 4, right: 4 },
     "top-left": { top: 4, left: 4 },
   }[position];
+  const label = getPollutantLabel(pollutant);
+  const unit = getPollutantUnit(pollutant);
 
   return (
     <Box position="absolute" {...pos} zIndex={1000}>
       <Box
         p={4}
         bg="rgba(7,23,63,.85)"
         border="1px solid"
         borderColor="rgba(255,255,255,.10)"
         rounded="xl"
         minW="240px"
       >
         <Text fontWeight="900" mb={3}>
-          {pollutant.toUpperCase()} (µg/m³)
+          {label} ({unit})
         </Text>
         <Stack spacing={2}>
           {items.map((it, i) => (
             <Flex key={i} align="center" gap={3}>
               <Box w="18px" h="18px" rounded="sm" border="1px solid rgba(255,255,255,.25)" style={{ background: it.color }} />
               <Text fontSize="sm" opacity={0.95}>{it.label}</Text>
             </Flex>
           ))}
         </Stack>
       </Box>
     </Box>
   );
 }
diff --git a/frontend/src/components/MapView.jsx b/frontend/src/components/MapView.jsx
index 7df4d5213e79ba850d7814bcd61dcadf253a96ca..792f01f73709ce50ff9a39c856d9faf037c6b72a 100644
--- a/frontend/src/components/MapView.jsx
+++ b/frontend/src/components/MapView.jsx
@@ -1,45 +1,50 @@
 import { useLayoutEffect, useRef } from "react";
 import maplibregl from "maplibre-gl";
 import "maplibre-gl/dist/maplibre-gl.css";
 import { fetchMeasurements, bboxFromMap, fetchAtPoint } from "../lib/api";
 import { colorExpression } from "../constants/aqi";
+import {
+  DEFAULT_POLLUTANT,
+  getPollutantLabel,
+  getPollutantUnit,
+} from "../constants/pollutants";
 
 function debounce(fn, ms) {
   let t;
   return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };
 }
 
 /**
  * Props:
- * - pollutant?: "pm25" | "pm10" | "no2" | ...
+ * - pollutant?: contaminante soportado por TEMPO
  * - fetcher?: ({bbox, pollutant, signal}) => GeoJSON
  * - center?: [lng, lat]
  * - zoom?: number
  */
 export default function MapView({
-  pollutant = "pm25",
+  pollutant = DEFAULT_POLLUTANT,
   fetcher = fetchMeasurements,
   center = [-64.1888, -31.4201],
   zoom = 12,
 }) {
   const mapRef = useRef(null);
   const divRef = useRef(null);
   const abortRef = useRef(null);
   const clickHandlerRef = useRef(null);
   const resizeObsRef = useRef(null);
 
   useLayoutEffect(() => {
     let raf;
 
     const init = () => {
       const el = divRef.current;
       if (!el) { raf = requestAnimationFrame(init); return; }
       if (mapRef.current || el.__maplibre_initialized) return;
       el.__maplibre_initialized = true;
 
       const rasterStyle = {
         version: 8,
         sources: {
           osm: {
             type: "raster",
             tiles: ["https://tile.openstreetmap.org/{z}/{x}/{y}.png"],
diff --git a/frontend/src/components/MapView.jsx b/frontend/src/components/MapView.jsx
index 7df4d5213e79ba850d7814bcd61dcadf253a96ca..792f01f73709ce50ff9a39c856d9faf037c6b72a 100644
--- a/frontend/src/components/MapView.jsx
+++ b/frontend/src/components/MapView.jsx
@@ -112,68 +117,72 @@ export default function MapView({
             type: "circle",
             source: SEL_SOURCE,
             paint: {
               "circle-color": ["case", ["has", "value"], colorExpression("value", pollutant), "#666"],
               "circle-radius": ["interpolate", ["linear"], ["zoom"], 3, 5, 12, 10],
               "circle-stroke-color": "#000",
               "circle-stroke-width": 2,
               "circle-opacity": 0.95,
             },
           });
         }
 
         if (clickHandlerRef.current) map.off("click", clickHandlerRef.current);
 
         const onClick = async (ev) => {
           const { lng, lat } = ev.lngLat;
 
           map.getSource(SEL_SOURCE).setData({
             type: "FeatureCollection",
             features: [{ type: "Feature", geometry: { type: "Point", coordinates: [lng, lat] }, properties: {} }],
           });
 
           try {
             const m = await fetchAtPoint({ lat, lon: lng, pollutant });
             if (m) {
-              const val = Number.parseFloat(String(m.value).replace(",", "."));
+              const parameterId = m.parameter || pollutant;
+              const val = toSafeNumber(m.value);
+              const unit = m.unit || getPollutantUnit(parameterId);
+
               map.getSource(SEL_SOURCE).setData({
                 type: "FeatureCollection",
                 features: [{
                   type: "Feature",
                   geometry: { type: "Point", coordinates: [lng, lat] },
                   properties: {
-                    parameter: m.parameter || pollutant,
-                    value: isNaN(val) ? null : val,
-                    unit: m.unit,
+                    parameter: parameterId,
+                    value: val,
+                    unit,
                     datetime: m.datetime,
                   },
                 }],
               });
 
+              const label = getPollutantLabel(parameterId);
               const html = `
                 <div style="font-family: 'Overpass', system-ui; padding:6px 4px; color:#fff;">
-                  <div><b>${m.parameter || pollutant}</b>: ${isNaN(val) ? "-" : val.toFixed(1)} ${m.unit || ""}</div>
+                  <div><b>${label}</b>: ${Number.isFinite(val) ? val.toFixed(3) : "-"} ${unit || ""}</div>
                   <div style="color:#B8C0DD; font-size:12px">${m.datetime ?? ""}</div>
                   <div style="color:#9AA3C0; font-size:11px">(${lat.toFixed(5)}, ${lng.toFixed(5)})</div>
                 </div>
               `;
               new maplibregl.Popup({ closeButton: true, maxWidth: "260px" })
                 .setLngLat([lng, lat])
                 .setHTML(html)
                 .addTo(map);
             }
           } catch (err) {
             console.error("Point query error:", err);
           }
         };
 
         clickHandlerRef.current = onClick;
         map.on("click", onClick);
         map.getCanvas().style.cursor = "crosshair";
       }
 
       const debounced = debounce(loadForCurrentView, 400);
       const boot = () => { ensureSelectionLayer(); loadForCurrentView(); };
       if (map.isStyleLoaded()) boot(); else map.once("idle", boot);
       map.on("moveend", debounced);
 
       resizeObsRef.current = new ResizeObserver(() => map.resize());
diff --git a/frontend/src/components/MapView.jsx b/frontend/src/components/MapView.jsx
index 7df4d5213e79ba850d7814bcd61dcadf253a96ca..792f01f73709ce50ff9a39c856d9faf037c6b72a 100644
--- a/frontend/src/components/MapView.jsx
+++ b/frontend/src/components/MapView.jsx
@@ -193,25 +202,31 @@ export default function MapView({
     };
   }, [pollutant, fetcher, center, zoom]);
 
   // Si cambia el contaminante, refrescar color del punto seleccionado
   useLayoutEffect(() => {
     const map = mapRef.current;
     if (!map) return;
     if (map.getLayer("selected-circle")) {
       map.setPaintProperty(
         "selected-circle",
         "circle-color",
         ["case", ["has", "value"], colorExpression("value", pollutant), "#666"]
       );
     }
   }, [pollutant]);
 
   return (
     <div
       ref={divRef}
       className="map-container spaceapps-bg"
       aria-label="Vista de mapa con mediciones de calidad del aire"
       role="region"
     />
   );
 }
+
+function toSafeNumber(value) {
+  if (value == null) return null;
+  const parsed = Number.parseFloat(String(value).replace(",", "."));
+  return Number.isFinite(parsed) ? parsed : null;
+}
diff --git a/frontend/src/constants/aqi.js b/frontend/src/constants/aqi.js
index 5908ecd7c2e7d5464fefc5f89125d840acca8cb1..6f6df5338c7a54dfaab53583dcf204ed5f9714d6 100644
--- a/frontend/src/constants/aqi.js
+++ b/frontend/src/constants/aqi.js
@@ -1,36 +1,37 @@
-// Escalas simplificadas (µg/m³). Ajustalas si tenés tablas oficiales.
+import { DEFAULT_POLLUTANT } from "./pollutants";
+
+// Escalas simplificadas para columnas troposféricas (mol/m² o DU según parámetro).
+const BASE_COLORS = ["#2E96F5", "#0960E1", "#E43700", "#8E1100", "#EAFE07"];
+
 export const SCALES = {
-  pm25: { breaks: [12, 35.4, 55.4, 150.4],   colors: ["#2E96F5","#0960E1","#E43700","#8E1100","#EAFE07"] },
-  pm10: { breaks: [54, 154, 254, 354],       colors: ["#2E96F5","#0960E1","#E43700","#8E1100","#EAFE07"] },
-  no2:  { breaks: [53, 100, 360, 649],       colors: ["#2E96F5","#0960E1","#E43700","#8E1100","#EAFE07"] },
-  o3:   { breaks: [70, 120, 160, 200],       colors: ["#2E96F5","#0960E1","#E43700","#8E1100","#EAFE07"] },
-  so2:  { breaks: [75, 185, 304, 604],       colors: ["#2E96F5","#0960E1","#E43700","#8E1100","#EAFE07"] },
-  // CO: si tu backend viene en mg/m³ y querés llevarlo a escala similar de µg/m³, usa multiplier 1000.
-  co:   { breaks: [4400, 9400, 15400, 30400], colors: ["#2E96F5","#0960E1","#E43700","#8E1100","#EAFE07"], multiplier: 1000 },
+  no2:  { breaks: [0.0005, 0.001, 0.002, 0.004], colors: BASE_COLORS },
+  so2:  { breaks: [0.0001, 0.0003, 0.0006, 0.001], colors: BASE_COLORS },
+  o3:   { breaks: [0.02, 0.04, 0.08, 0.12], colors: BASE_COLORS }, // en Dobson Units aprox.
+  hcho: { breaks: [0.0003, 0.0006, 0.0012, 0.0024], colors: BASE_COLORS },
 };
 
 export function colorExpression(prop, pollutant) {
-  const cfg = SCALES[pollutant] || SCALES.pm25;
+  const cfg = SCALES[pollutant] || SCALES[DEFAULT_POLLUTANT];
   const { breaks, colors, multiplier = 1 } = cfg;
   const base = ["*", ["to-number", ["get", prop]], multiplier];
   const expr = ["step", base, colors[0]];
   for (let i = 0; i < breaks.length; i++) {
     expr.push(breaks[i], colors[i + 1] || colors[colors.length - 1]);
   }
   return expr;
 }
 
 export function legendFor(pollutant) {
-  const cfg = SCALES[pollutant] || SCALES.pm25;
+  const cfg = SCALES[pollutant] || SCALES[DEFAULT_POLLUTANT];
   const { breaks, colors } = cfg;
   const items = [];
   for (let i = 0; i <= breaks.length; i++) {
     const color = colors[i] || colors[colors.length - 1];
     let label;
     if (i === 0) label = `< ${breaks[0]}`;
     else if (i === breaks.length) label = `≥ ${breaks[breaks.length - 1]}`;
     else label = `${breaks[i - 1]} – ${breaks[i]}`;
     items.push({ color, label });
   }
   return items;
 }
diff --git a/frontend/src/lib/api.js b/frontend/src/lib/api.js
index 5c19e6a35b4b12ae2737097c7db179dac7d97bf4..3c71bea63f2048013b143bea503370e41384a81b 100644
--- a/frontend/src/lib/api.js
+++ b/frontend/src/lib/api.js
@@ -1,122 +1,163 @@
 // src/lib/api.js
+import { API_TO_UI, DEFAULT_POLLUTANT, UI_TO_API } from "../constants/pollutants";
 
 // Base configurable: absoluto (http...) o relativo (/api). Default: /api
 const RAW_BASE = (import.meta.env.VITE_API_BASE || "/api").trim();
 
 // Siempre construye una URL absoluta válida (evita "Invalid URL")
 function apiUrl(pathname) {
   const absBase = RAW_BASE.startsWith("http")
     ? RAW_BASE
     : window.location.origin + (RAW_BASE.startsWith("/") ? RAW_BASE : `/${RAW_BASE}`);
   const base = absBase.endsWith("/") ? absBase : absBase + "/";
   return new URL(pathname, base);
 }
 
 // ── Alias UI ↔ API ───────────────────────────────────────────────────────────
-const UI_TO_API = {
-  pm25: "pm2_5",
-  o3: "ozone",
-  no2: "nitrogen_dioxide",
-  so2: "sulphur_dioxide",
-  co: "carbon_monoxide",
-  nh3: "ammonia",
-};
-const API_TO_UI = Object.fromEntries(Object.entries(UI_TO_API).map(([k, v]) => [v, k]));
 const toApiParam = (p) => UI_TO_API[p] || p;
 const toUiParam  = (p) => API_TO_UI[p] || p;
 
 // ── Cache ────────────────────────────────────────────────────────────────────
 const cache = new Map();
 const TTL_MS = 30_000;
 const cacheKey = ({ pollutant, bbox }) => `${pollutant}:${bbox.join(",")}`;
 const setCache  = (k, v) => cache.set(k, { value: v, exp: Date.now() + TTL_MS });
 const getCache  = (k) => {
   const it = cache.get(k);
   if (!it) return null;
   if (Date.now() > it.exp) { cache.delete(k); return null; }
   return it.value;
 };
 
 // ── Helpers ──────────────────────────────────────────────────────────────────
 export function bboxFromMap(map) {
   const b = map.getBounds();
   const raw = [b.getWest(), b.getSouth(), b.getEast(), b.getNorth()];
   return raw.map((x) => +x.toFixed(3));
 }
 
 // Normaliza a número, tolera coma decimal "12,3"
 function toNumberSafe(v) {
   const n = Number.parseFloat(String(v).replace(",", "."));
   return Number.isFinite(n) ? n : null;
 }
 
 // ── Carga por vista ──────────────────────────────────────────────────────────
 export async function fetchMeasurements({ bbox, pollutant, signal }) {
-  const [w, s, e, n] = bbox;
-  const lat = (s + n) / 2;
-  const lon = (w + e) / 2;
-  const radiusMeters = Math.min(
-    Math.hypot((e - w) * 111_000 * Math.cos((lat * Math.PI) / 180), (n - s) * 111_000) / 2,
-    50_000
-  );
-
-  const url = apiUrl("openaq/normalized");
-  url.searchParams.set("lat", lat.toFixed(5));
-  url.searchParams.set("lon", lon.toFixed(5));
-  url.searchParams.set("radius", String(Math.round(radiusMeters)));
-  url.searchParams.set("limit", "200");
+  const url = apiUrl("tempo/measurements");
+  url.searchParams.set("bbox", bbox.map((x) => x.toFixed(3)).join(","));
   url.searchParams.set("parameter", toApiParam(pollutant));
+  url.searchParams.set("limit", "500");
 
   const key = cacheKey({ pollutant, bbox });
   const fromCache = getCache(key);
   if (fromCache) return fromCache;
 
   const res = await fetch(url, { signal });
   if (!res.ok) throw new Error(`API ${res.status}`);
   const data = await res.json();
 
-  // GeoJSON normalizado (parámetro en nombre UI y value numérico)
-  const fc = {
-    type: "FeatureCollection",
-    features: (data.results || []).map((r) => ({
-      type: "Feature",
-      // Ajustá si tu API usa otras keys: longitude/latitude
-      geometry: { type: "Point", coordinates: [r.lon, r.lat] },
-      properties: {
-        parameter: toUiParam(r.parameter),
-        value: toNumberSafe(r.value),
-        unit: r.unit,
-        datetime: r.datetime,
-      },
-    })),
-  };
+  const features = normalizeFeatureCollection(data, { pollutant });
+  const fc = { type: "FeatureCollection", features };
 
   setCache(key, fc);
   return fc;
 }
 
 // ── Consulta puntual (click) ────────────────────────────────────────────────
-export async function fetchAtPoint({ lat, lon, pollutant = "pm25", signal }) {
-  const url = apiUrl("openaq/normalized");
-  url.searchParams.set("lat", lat.toFixed(5));
-  url.searchParams.set("lon", lon.toFixed(5));
-  url.searchParams.set("radius", "2000");
-  url.searchParams.set("limit", "20");
+export async function fetchAtPoint({ lat, lon, pollutant = DEFAULT_POLLUTANT, signal }) {
+  const delta = 0.15; // ~15 km de radio alrededor del punto
+  const bbox = [
+    lon - delta,
+    lat - delta,
+    lon + delta,
+    lat + delta,
+  ];
+
+  const url = apiUrl("tempo/measurements");
+  url.searchParams.set("bbox", bbox.map((x) => x.toFixed(3)).join(","));
   url.searchParams.set("parameter", toApiParam(pollutant));
+  url.searchParams.set("limit", "20");
 
   const res = await fetch(url, { signal });
   if (!res.ok) throw new Error(`API ${res.status}`);
   const data = await res.json();
 
-  const list = Array.isArray(data?.results) ? data.results : [];
-  const byPollutant = list
-    .map((r) => ({ ...r, parameter: toUiParam(r.parameter) }))
-    .filter((r) => r.parameter === pollutant);
+  const features = normalizeFeatureCollection(data, { pollutant });
+  const match = features.find((f) => f.properties.parameter === pollutant);
+  const picked = match || features[0] || null;
 
-  const pickedRaw =
-    byPollutant[0] ||
-    (list[0] && { ...list[0], parameter: toUiParam(list[0].parameter) }) ||
+  return picked ? { ...picked.properties } : null;
+}
+
+function normalizeFeatureCollection(data, { pollutant }) {
+  const rawFeatures = Array.isArray(data?.features)
+    ? data.features
+    : Array.isArray(data?.results)
+      ? data.results
+      : Array.isArray(data?.data)
+        ? data.data
+        : [];
+  return rawFeatures
+    .map((feature) => normalizeFeature(feature, pollutant))
+    .filter(Boolean);
+}
+
+function normalizeFeature(feature, fallbackPollutant) {
+  if (!feature) return null;
+  const geometry = ensurePointGeometry(feature);
+  if (!geometry) return null;
+
+  const srcProps = feature.properties ?? feature;
+  const parameterRaw =
+    srcProps.parameter ??
+    srcProps.pollutant ??
+    srcProps.species ??
+    srcProps.product ??
+    fallbackPollutant;
+
+  const valueRaw =
+    srcProps.value ??
+    srcProps.measurement ??
+    srcProps.average ??
+    srcProps.avg ??
+    srcProps.mean ??
+    null;
+
+  const datetime =
+    srcProps.datetime ??
+    srcProps.timestamp ??
+    srcProps.time ??
+    srcProps.date ??
     null;
 
-  return pickedRaw ? { ...pickedRaw, value: toNumberSafe(pickedRaw.value) } : null;
+  const unit = srcProps.unit ?? srcProps.units ?? srcProps.unit_of_measurement ?? "";
+
+  return {
+    type: "Feature",
+    geometry,
+    properties: {
+      parameter: toUiParam(parameterRaw),
+      value: toNumberSafe(valueRaw),
+      unit,
+      datetime,
+    },
+  };
+}
+
+function ensurePointGeometry(feature) {
+  const geom = feature.geometry;
+  if (geom?.type === "Point" && Array.isArray(geom.coordinates) && geom.coordinates.length >= 2) {
+    const [lon, lat] = geom.coordinates;
+    if (Number.isFinite(lon) && Number.isFinite(lat)) {
+      return { type: "Point", coordinates: [lon, lat] };
+    }
+  }
+
+  const src = feature.properties ?? feature;
+  const lon = toNumberSafe(src.lon ?? src.longitude ?? src.x ?? feature.lon ?? feature.longitude);
+  const lat = toNumberSafe(src.lat ?? src.latitude ?? src.y ?? feature.lat ?? feature.latitude);
+  if (lat == null || lon == null) return null;
+
+  return { type: "Point", coordinates: [lon, lat] };
 }
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
index 40c85bda62811ee3c19a8bcfc22048769f9cf9f2..423c92cf179c56b5011852d334fa5d9607d8cba4 100644
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@ -1,22 +1,23 @@
 import { useState } from "react";
 import Header from "./components/Header";
 import FilterBar from "./components/FilterBar";
 import MapView from "./components/MapView";
 import Legend from "./components/Legend";
 import "./App.css";
+import { DEFAULT_POLLUTANT } from "./constants/pollutants";
 
 export default function App() {
-  const [pollutant, setPollutant] = useState("pm25");
+  const [pollutant, setPollutant] = useState(DEFAULT_POLLUTANT);
 
   return (
     <div className="app">
       <Header />
       {/* Contenedor posicionado: filtro + mapa + leyenda */}
       <div style={{ position: "relative" }}>
         <FilterBar pollutant={pollutant} onChange={setPollutant} />
         <MapView pollutant={pollutant} />
         <Legend pollutant={pollutant} />
       </div>
     </div>
   );
 }
diff --git a/frontend/src/components/FilterBar.jsx b/frontend/src/components/FilterBar.jsx
index ec2bb017ace4a7b8c6fad4320380c499f6677a2f..ab1566ce4ab8f6153bf9710c50f386e45ecb0ab4 100644
--- a/frontend/src/components/FilterBar.jsx
+++ b/frontend/src/components/FilterBar.jsx
@@ -1,33 +1,33 @@
 import { Box, FormControl, FormLabel, Select } from "@chakra-ui/react";
+import { TEMPO_POLLUTANTS, getPollutantLabel } from "../constants/pollutants";
 
 export default function FilterBar({ pollutant, onChange }) {
   return (
     <Box
       px={{ base: 4, md: 8 }}
       py={3}
       bg="rgba(7,23,63,.85)"
       borderBottom="1px solid"
       borderColor="rgba(255,255,255,.08)"
       display="flex"
       gap={4}
       alignItems="center"
     >
       <FormControl w={{ base: "100%", sm: "320px" }}>
         <FormLabel mb={1}>Contaminante</FormLabel>
         <Select
           value={pollutant}
           onChange={(e) => onChange(e.target.value)}
           bg="white"
           color="black"
         >
-          <option value="pm25">PM2.5</option>
-          <option value="pm10">PM10</option>
-          <option value="no2">NO₂</option>
-          <option value="o3">O₃</option>
-          <option value="so2">SO₂</option>
-          <option value="co">CO</option>
+          {TEMPO_POLLUTANTS.map((item) => (
+            <option key={item.id} value={item.id}>
+              {getPollutantLabel(item.id)}
+            </option>
+          ))}
         </Select>
       </FormControl>
     </Box>
   );
 }
 
